#This file is part of ElectricEye.
#SPDX-License-Identifier: Apache-2.0

#Licensed to the Apache Software Foundation (ASF) under one
#or more contributor license agreements.  See the NOTICE file
#distributed with this work for additional information
#regarding copyright ownership.  The ASF licenses this file
#to you under the Apache License, Version 2.0 (the
#"License"); you may not use this file except in compliance
#with the License.  You may obtain a copy of the License at

#http://www.apache.org/licenses/LICENSE-2.0

#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License.
AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for the ElectricEye-ChatOps module to send Security Hub findings to Teams
Metadata:
  License: Apache-2.0
Parameters:
  SSMParameterNameForTeamsWebhook:
    Type: String
    Description: The name of the SSM Parameter that contains the Teams App Webhook URL for ElectricEye-ChatOps Teams edition
  RequestsPackageKlayersArn:
    Type: String
    Descripton: Arn of Keith Layers for requests package. Visit https://github.com/keithrozario/Klayers for more info.
Resources:
  ElectricEyeChatOpsRRLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ElectricEye-ChatOps-Teams
      Description: Sends the results of high-severity ElectricEye findings to a Teams Channel - Managed by CloudFormation
      Handler: index.lambda_handler
      Layers: !Ref RequestsPackageKlayersArn
      MemorySize: 256
      Role: !GetAtt ElectricEyeChatOpsExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          SSM_Parameter_Name: !Ref SSMParameterNameForTeamsWebhook
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import requests

          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing Slack Webhook URL
              ssm_parameter_name = os.environ['SSM_Parameter_Name']
              teams_webhook = ""
              try:
                  response = ssm.get_parameter(Name=ssm_parameter_name)
                  response_object = str(response['Parameter']['Value'])
                  response_object_dict = json.loads(response_object)
                  teams_webhook = response_object_dict.get('teams_webhook')

              except Exception as e:
                  print(e)

              for findings in event['detail']['findings']:
                  if findings.get("Compliance").get("Status") == "FAILED":
                      severityLabel = findings['Severity']['Label']
                      title = findings['Title']
                      awsAccountId = findings['AwsAccountId']
                      for resources in findings['Resources']:
                          resourceId = resources['Id']
                          resourceType = resources['Type']
                          resourceRegion = resources['Region']
                          teams_payload = {
                              "@type": "MessageCard",
                              "@context": "http: //schema.org/extensions",
                              "themeColor": "0584 ED",
                              "summary": "Findings",
                              "sections": [

                                  {
                                      "facts": [
                                          {
                                              "name": "Resource:",
                                              "value": resourceId
                                          },
                                          {
                                              "name": "Resource Type:",
                                              "value": resourceType
                                          },
                                          {
                                              "name": "Region:",
                                              "value": resourceRegion
                                          },
                                          {
                                              "name": "Time:",
                                              "value": event.get("time")
                                          },
                                          {
                                              "name": "Account:",
                                              "value": awsAccountId
                                          },
                                          {
                                              "name": "Compliance Status:",
                                              "value": findings.get("Compliance").get("Status")
                                          },
                                          {
                                              "name": "Check:",
                                              "value": title
                                          },
                                          {
                                              "name": "FindingId:",
                                              "value": findings.get("Id")
                                          },
                                          {
                                              "name": "Recommendation:",
                                              "value": findings.get('Remediation').get('Recommendation').get('Text')
                                          },
                                          {
                                              "name": "Severity:",
                                              "value": severityLabel
                                          }
                                      ],
                                      "text": "**Findings:**"
                                          }
                                      ]
                                  }

                          status = requests.post(teams_webhook, json.dumps(teams_payload).encode('utf-8'))
                          print(status)

                  else:
                      print("Compliance Status is either passed or None " + findings.get("Compliance").get(
                          "Status") + " for " + findings.get("Id"))
  ElectricEyeChatOpsExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ElectricEye-ChatOps-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeChatOpsEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: ElectricEye-ChatOps-CWE
      Description: "Sends the results of high-severity ElectricEye findings to a Teams Channel via Lambda - Managed by CloudFormation"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Imported
        detail: 
          findings:
            ProductFields:
              Product Name:
              - ElectricEye
            Severity:
              Label:
                - HIGH
                - CRITICAL
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ElectricEyeChatOpsRRLambdaFunction"
              - "Arn"
          Id: "ElectricEye_ChatOps_CWE"
  ElectricEyeChatOpsRRCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ElectricEyeChatOpsRRLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ElectricEyeChatOpsEventRule"
          - "Arn"