# This file is part of ElectricEye.

# ElectricEye is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ElectricEye is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with ElectricEye.  
# If not, see https://github.com/jonrau1/ElectricEye/blob/master/LICENSE.
AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for the ElectricEye-ChatOps module to send Security Hub findings to Slack
Metadata:
  License: GPL-3.0
Parameters:
  Python3RequestsLayer:
    Type: String
    Description: The regional ARN with Version of the Lambda Layer that has Python 3.7 support for the requests library
    Default: arn:aws:lambda:us-east-1:770693421928:layer:Klayers-python38-requests:3
  SlackWebHookParameter:
    Type: String
    Description: The name of the SSM Parameter that contains the Slack App Webhook URL for ElectricEye-ChatOps
Resources:
  ElectricEyeChatOpsRRLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ElectricEye-ChatOps-Slack
      Description: Sends the results of high-severity ElectricEye findings to a Slack Channel
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt ElectricEyeChatOpsExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          SLACK_WEBHOOK_PARAMETER: !Ref SlackWebHookParameter
      Layers:
        - !Ref Python3RequestsLayer
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import requests
          def lambda_handler(event, context):
              # create ssm client
              ssm = boto3.client('ssm')
              # create env var for SSM Parameter containing Slack Webhook URL
              webhookParam = os.environ['SLACK_WEBHOOK_PARAMETER']
              # retrieve slack webhook from SSM
              try:
                  response = ssm.get_parameter(Name=webhookParam)
                  slackWebhook = str(response['Parameter']['Value'])
              except Exception as e:
                  print(e)
              slackHeaders = { 'Content-Type': 'application/json' }
              for findings in event['detail']['findings']:
                  severityLabel = str(findings['ProductFields']['aws/securityhub/SeverityLabel'])
                  electricEyeCheck = str(findings['Title'])
                  awsAccountId = str(findings['AwsAccountId'])
                  for resources in findings['Resources']:
                      resourceId = str(resources['Id'])
                      slackMessage = 'A new ' + severityLabel + ' severity finding for ' + resourceId + ' in acccount ' + awsAccountId + ' has been created in Security Hub due to failing the check: ' + electricEyeCheck
                      message = { 'text': slackMessage }
                      requests.post(slackWebhook, headers=slackHeaders, data=json.dumps(message))
  ElectricEyeChatOpsExecRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ElectricEye-ChatOps-RolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            - ssm:GetParameters
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeChatOpsEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: ElectricEye-ChatOps-CWE
      Description: "Sends the results of high-severity ElectricEye findings to a Slack Channel via Lambda"
      EventPattern: 
        source: 
          - aws.securityhub
        detail-type: 
          - Security Hub Findings - Imported
        detail: 
          findings:
            ProductFields:
              Product Name:
              - ElectricEye
              aws/securityhub/SeverityLabel:
              - HIGH
              - CRITICAL
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "ElectricEyeChatOpsRRLambdaFunction"
              - "Arn"
          Id: "ElectricEye_ChatOps_CWE"
  ElectricEyeChatOpsRRCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "ElectricEyeChatOpsRRLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ElectricEyeChatOpsEventRule"
          - "Arn"