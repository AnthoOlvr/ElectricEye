# This file is part of ElectricEye.

# ElectricEye is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ElectricEye is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with ElectricEye.  
# If not, see https://github.com/jonrau1/ElectricEye/blob/master/LICENSE.

AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for ElectricEye
Metadata:
  License: GPL-3.0
Parameters:
  ShodanApiKeySSMParam:
    Type: String
    Description: The SSM Secure String Parameter containing your Shodan API key. Leave the default value if you will not be using Shodan
    Default: placeholder
  ElectricEyeClusterName:
    Type: String
    Description: Name of the ECS Cluster that the ElectricEye Fargate Task will run in
    Default: ElectricEyeCluster
  ElectricEyeContainerName: 
    Type: String
    Description: Name of the ElectricEye Container Definition within the ECS Task
    Default: ElectricEye
  ElectricEyeContainerInfo: 
    Type: String
    Description: ECR URI of the ElectricEye container
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: electric-eye
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.77.0.0/16
  ElectricEyeScheduledSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.77.10.0/24
  ElectricEyeScheduledSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.77.20.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ElectricEyeScheduledSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ElectricEyeScheduledSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  ElectricEyeScheduledSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref ElectricEyeScheduledSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ElectricEyeScheduledSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ElectricEyeScheduledSubnet1
  ElectricEyeScheduledSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ElectricEyeScheduledSubnet2
  ElectricEyeS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  ElectricEyeEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ElectricEyeSecurityGroup
      SubnetIds:
        - !Ref ElectricEyeScheduledSubnet1
        - !Ref ElectricEyeScheduledSubnet2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcId: !Ref VPC
  ElectricEyeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ElectricEye Security Group"
      GroupDescription: "Security group with HTTPS for Electric Eye Fargate"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: HTTPS Inbound
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  ElectricEyeECSCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join [ "-", [ !Ref ElectricEyeContainerName, !Ref 'AWS::StackName' ] ]
      RetentionInDays: 90
  ElectricEyeECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ElectricEyeClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  ElectricEyeTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: electriceyetaskpolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - access-analyzer:ListAnalyzers
            - apigateway:GET
            - appstream:DescribeFleets
            - appstream:DescribeImages
            - appstream:DescribeUsers
            - backup:DescribeProtectedResource
            - cloudformation:DescribeStacks
            - cloudfront:ListDistributions
            - cloudtrail:DescribeTrails
            - cloudtrail:ListTrails
            - codebuild:BatchGetProjects
            - codebuild:ListProjects
            - cognito-idp:DescribeUserPool
            - cognito-idp:ListUserPools
            - dms:DescribeReplicationInstances
            - ds:DescribeDirectories
            - ds:ListLogSubscriptions
            - dynamodb:DescribeTable
            - dynamodb:ListTables
            - ec2:DescribeAddresses
            - ec2:DescribeFlowLogs
            - ec2:DescribeImageAttribute
            - ec2:DescribeImages
            - ec2:DescribeInstanceAttribute
            - ec2:DescribeInstances
            - ec2:DescribeSecurityGroupReferences
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSnapshotAttribute
            - ec2:DescribeSnapshots
            - ec2:DescribeVolumes
            - ec2:DescribeVpcs
            - ec2:GetEbsDefaultKmsKeyId
            - ec2:GetEbsEncryptionByDefault
            - ecs:ListClusters
            - ecs:DescribeClusters
            - ecr:DescribeRepositories
            - ecr:GetLifecyclePolicy
            - ecr:GetRepositoryPolicy
            - eks:DescribeCluster
            - eks:ListClusters
            - elasticfilesystem:DescribeFileSystems
            - elasticache:DescribeCacheClusters
            - elasticloadbalancing:DescribeListeners
            - elasticloadbalancing:DescribeLoadBalancerAttributes
            - elasticloadbalancing:DescribeLoadBalancers
            - es:DescribeElasticsearchDomain
            - es:ListDomainNames
            - guardduty:ListDetectors
            - kafka:DescribeCluster
            - kafka:ListClusters
            - kinesis:DescribeStream
            - kinesis:ListStreams
            - kms:Decrypt
            - kms:DescribeKey
            - rds:DescribeDBClusterParameterGroups
            - rds:DescribeDBClusterParameters
            - rds:DescribeDBClusters
            - rds:DescribeDBClusterSnapshotAttributes
            - rds:DescribeDBClusterSnapshots
            - rds:DescribeDBInstances
            - rds:DescribeDBParameterGroups
            - rds:DescribeDBParameters
            - rds:DescribeDBSnapshotAttributes
            - rds:DescribeDBSnapshots
            - redshift:DescribeClusters
            - redshift:DescribeLoggingStatus
            - route53:ListHostedZones
            - s3:GetAccountPublicAccessBlock
            - s3:GetEncryptionConfiguration
            - s3:GetLifecycleConfiguration
            - s3:GetObject
            - s3:ListAllMyBuckets
            - s3:ListBucket
            - sagemaker:DescribeEndpoint
            - sagemaker:DescribeModel
            - sagemaker:DescribeNotebookInstance
            - sagemaker:ListEndpoints
            - sagemaker:ListModels
            - sagemaker:ListNotebookInstances
            - secretsmanager:ListSecrets
            - securityhub:BatchImportFindings
            - securityhub:GetFindings
            - shield:DescribeDRTAccess
            - shield:DescribeProtection
            - shield:DescribeSubscription
            - sns:GetTopicAttributes
            - sns:ListSubscriptions
            - sns:ListSubscriptionsByTopic
            - sns:ListTopics
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:DescribeInstanceAssociationsStatus
            - ssm:DescribeInstanceInformation
            - ssm:DescribeInstancePatches
            - ssm:DescribeInstancePatchStates
            - ssm:DescribeInstanceProperties
            - workspaces:DescribeWorkspaceDirectories
            - workspaces:DescribeWorkspaces              
            Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: ecs-tasks.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: electriceyeexecpolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - kms:Decrypt
            - kms:DescribeKey
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ssm:GetParameter
            - ssm:GetParameters
            Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: ecs-tasks.amazonaws.com }
          Action:
          - sts:AssumeRole
  ElectricEyeArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${EnvironmentName}-artifact-bucket-${AWS::Region}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ElectricEyeBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: electric-eye-bucket
      Type: String
      Value: !Ref ElectricEyeArtifactBucket
  ElectricEyeECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        -   
          Image: !Ref ElectricEyeContainerInfo
          Name: !Ref ElectricEyeContainerName
          Secrets:
            - Name: SH_SCRIPTS_BUCKET
              ValueFrom: !Ref ElectricEyeBucketParameter
          Environment:
            - Name: SHODAN_API_KEY_PARAM
              Value: !Ref ShodanApiKeySSMParam
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ElectricEyeECSCloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Cpu: 2048
      ExecutionRoleArn: !GetAtt ElectricEyeExecutionRole.Arn
      Memory: 4096
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ElectricEyeTaskRole.Arn
      Family: ElectricEye2SecurityHubTask
      RequiresCompatibilities:
        - FARGATE
  ElectricEyeTaskScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(12 hours)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ElectricEyeECSCluster.Arn
          RoleArn: !GetAtt ElectricEyeTaskRole.Arn
          Id: ElectricEyeTaskScheduler
          EcsParameters:
            TaskDefinitionArn: !Ref ElectricEyeECSTaskDefinition
            TaskCount: 1
            LaunchType: FARGATE
            PlatformVersion: 'LATEST'
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref ElectricEyeSecurityGroup
                Subnets:
                  - !Ref ElectricEyeScheduledSubnet1
                  - !Ref ElectricEyeScheduledSubnet2