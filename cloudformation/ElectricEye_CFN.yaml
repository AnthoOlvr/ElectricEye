#This file is part of ElectricEye.
#SPDX-License-Identifier: Apache-2.0

#Licensed to the Apache Software Foundation (ASF) under one
#or more contributor license agreements.  See the NOTICE file
#distributed with this work for additional information
#regarding copyright ownership.  The ASF licenses this file
#to you under the Apache License, Version 2.0 (the
#"License"); you may not use this file except in compliance
#with the License.  You may obtain a copy of the License at

#http://www.apache.org/licenses/LICENSE-2.0

#Unless required by applicable law or agreed to in writing,
#software distributed under the License is distributed on an
#"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#KIND, either express or implied.  See the License for the
#specific language governing permissions and limitations
#under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: This Template will create the supporting infrastructure for ElectricEye
Metadata:
  License: Apache-2.0
Parameters:
  # THREAT INTEL
  ShodanApiKeySSMParam:
    Type: String
    Description: The SSM Secure String Parameter containing your Shodan API key. Leave the default value if you will not be using Shodan
    Default: placeholder
  # DISRUPTOPS
  DopsClientIdSSMParam:
    Type: String
    Description: The SSM Secure String Parameter containing your DisruptOps Client ID. Leave the default value if you will not be using DisruptOps
    Default: placeholder
  DopsApiKeySSMParam:
    Type: String
    Description: The SSM Secure String Parameter containing your DisruptOps API key. Leave the default value if you will not be using DisruptOps
    Default: placeholder
  # POSTGRESQL
  PostgresUsername:
    Type: String
    Description: Main PostgreSQL User Name used for DB Authentication. Leave the default value if you will not be sending findings to PostgreSQL
    Default: placeholder
  PostgresDbName:
    Type: String
    Description: Database Name within PostgreSQL to place ElectricEye table. Leave the default value if you will not be using PostgreSQL
    Default: placeholder
  PostgresEndpoint:
    Type: String
    Description: Hostname of your PostgreSQL Database. Leave the default value if you will not be sending findings to PostgreSQL
    Default: placeholder
  PostgresPort:
    Type: String
    Description: The Port Number of your PostgreSQL Database. Leave the default value if you will not be using PostgreSQL
    Default: placeholder
  PostgresPasswordSSMParam:
    Type: String
    Description: The SSM Secure String Parameter containing your PostgreSQL Password. Leave the default value if you will not be using PostgreSQL
    Default: placeholder
  # AWS DocDB
  MongoUsername:
    Type: String
    Description: Main Mongo User Name used for DocDB Authentication. Leave the default value if you will not be sending findings to DocDB
    Default: placeholder
  MongoPasswordSSMParamter:
    Type: String
    Description: SSM Parameter name containing your DocDB Mongo Password. Leave the default value if you will not be using DocDB
    Default: placeholder
  DocDbHostname:
    Type: String
    Description: Hostname of your DocDB Database. Leave the default value if you will not be sending findings to DocDB
    Default: placeholder
  # ELECTRICEYE CORE
  ElectricEyeClusterName:
    Type: String
    Description: Name of the ECS Cluster that the ElectricEye Fargate Task will run in
    Default: ElectricEyeCluster
  ElectricEyeContainerName:
    Type: String
    Description: Name of the ElectricEye Container Definition within the ECS Task
    Default: ElectricEye
  ElectricEyeContainerInfo:
    Type: String
    Description: ECR URI of the ElectricEye container
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: electric-eye
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.77.0.0/16
  ElectricEyeScheduledSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.77.10.0/24
  ElectricEyeScheduledSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.77.20.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ElectricEyeScheduledSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref ElectricEyeScheduledSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
  ElectricEyeScheduledSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref ElectricEyeScheduledSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ElectricEyeScheduledSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ElectricEyeScheduledSubnet1
  ElectricEyeScheduledSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ElectricEyeScheduledSubnet2
  ElectricEyeS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
  ElectricEyeEcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ElectricEyeSecurityGroup
      SubnetIds:
        - !Ref ElectricEyeScheduledSubnet1
        - !Ref ElectricEyeScheduledSubnet2
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      VpcId: !Ref VPC
  ElectricEyeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ElectricEye Security Group"
      GroupDescription: "Security group with HTTPS for Electric Eye Fargate"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS Inbound
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  ElectricEyeECSCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        !Join ["-", [!Ref ElectricEyeContainerName, !Ref "AWS::StackName"]]
      RetentionInDays: 90
  ElectricEyeECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ElectricEyeClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  ElectricEyeTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: electriceyetaskpolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - athena:GetWorkGroup
                - athena:ListWorkGroups
                - airflow:GetEnvironment
                - airflow:ListEnvironments
                - autoscaling:DescribeAutoScalingGroups
                - cloudtrail:DescribeTrails
                - cloudtrail:ListTrails
                - kms:DescribeKey
                - kms:Decrypt
                - access-analyzer:ListAnalyzers
                - ec2:Describe*
                - kms:ListKeys
                - cloudformation:ListStacks
                - kinesisanalytics:ListApplications
                - ec2:Get*
                - cassandra:Select
                - kms:ListAliases
                - ram:GetResourceShares
                - cloudwatch:GetMetricData
                - qldb:ListLedgers
                - qldb:ListJournalS3Exports
                - rds:DescribeEventSubscriptions
                - ssm:ListDocuments
                - ssm:ListAssociations
                - ssm:DescribeDocumentPermission
                - ecs:ListClusters
                - ecs:DescribeClusters
                - elasticloadbalancing:DescribeLoadBalancers
                - kinesis:ListStreams
                - cognito-idp:DescribeUserPool
                - dynamodb:DescribeTable
                - dynamodb:DescribeContinuousBackups
                - dynamodb:DescribeTimeToLive
                - dynamodb:ListTables
                - dax:DescribeParameters
                - dax:DescribeClusters
                - detective:ListGraphs
                - shield:DescribeSubscription
                - acm:DescribeCertificate
                - acm:ListCertificates
                - elasticmapreduce:DescribeCluster
                - elasticmapreduce:DescribeSecurityConfiguration
                - elasticmapreduce:GetBlockPublicAccessConfiguration
                - elasticmapreduce:ListClusters
                - firehose:DescribeDeliveryStream
                - firehose:ListDeliveryStreams
                - glue:GetSecurityConfiguration
                - glue:GetResourcePolicy
                - glue:GetCrawler
                - glue:GetDataCatalogEncryptionSettings
                - glue:ListCrawlers
                - appmesh:DescribeMesh
                - appmesh:DescribeVirtualNode
                - appmesh:ListMeshes
                - appmesh:ListVirtualNodes
                - support:DescribeTrustedAdvisorCheckResult
                - support:DescribeTrustedAdvisorChecks
                - health:DescribeEvents
                - iam:GetAccountPasswordPolicy
                - iam:ListUsers
                - iam:ListAccessKeys
                - iam:ListMfaDevices
                - iam:ListUserPolicies
                - iam:ListAttachedUserPolicies
                - iam:ListServerCertificates
                - rolesanywhere:ListProfiles
                - rolesanywhere:ListTrustAnchors
                - rolesanywhere:ListCrls
                - macie2:GetMacieSession
                - managedblockchain:Get*
                - managedblockchain:List*
                - mq:Describe*
                - mq:List*
                - memorydb:Describe*
                - license-manager:GetLicenseConfiguration
                - license-manager:ListLicenseConfigurations
                - ecr:DescribeImages
                - ecr:GetRegistryPolicy
                - ecr:DescribeRegistry
                - securityhub:GetFindings
                - codebuild:ListProjects
                - codebuild:ListSourceCredentials
                - workspaces:DescribeWorkspaces
                - ecr:GetLifecyclePolicy
                - sns:ListSubscriptionsByTopic
                - appstream:DescribeImages
                - kafka:DescribeCluster
                - cognito-idp:ListUserPools
                - cloudformation:DescribeStacks
                - elasticloadbalancing:DescribeLoadBalancerAttributes
                - elasticloadbalancing:DescribeListeners
                - elasticbeanstalk:DescribeEnvironments
                - elasticbeanstalk:DescribeConfigurationSettings
                - ds:ListLogSubscriptions
                - s3:GetObject
                - eks:DescribeCluster
                - eks:ListClusters
                - elasticache:DescribeCacheClusters
                - shield:DescribeDRTAccess
                - secretsmanager:ListSecrets
                - s3:GetLifecycleConfiguration
                - appstream:DescribeUsers
                - kafka:ListClusters
                - shield:DescribeProtection
                - sagemaker:DescribeNotebookInstance
                - sns:ListTopics
                - elasticfilesystem:DescribeFileSystems
                - apigateway:GET
                - rds:DescribeDB*
                - rds:DescribeEventCategories
                - s3:ListBucket
                - backup:DescribeProtectedResource
                - s3:GetEncryptionConfiguration
                - s3:GetBucketLogging
                - s3:GetBucketPolicy
                - s3:GetBucketPolicyStatus
                - s3:GetBucketVersioning
                - es:DescribeElasticsearchDomain
                - ssm:DescribeInstance*
                - redshift:DescribeLoggingStatus
                - redshift:DescribeClusters
                - redshift:DescribeClusterParameters
                - appstream:DescribeFleets
                - ecr:DescribeRepositories
                - sagemaker:DescribeEndpoint
                - workspaces:DescribeWorkspaceDirectories
                - sagemaker:ListNotebookInstances
                - codebuild:BatchGetProjects
                - guardduty:ListDetectors
                - dms:DescribeReplicationInstances
                - sns:GetTopicAttributes
                - route53:ListTrafficPolicyInstancesByHostedZone
                - route53:ListHostedZones
                - route53:ListResourceRecordSets
                - route53:ListQueryLoggingConfigs
                - sagemaker:DescribeModel
                - kinesis:DescribeStream
                - sns:ListSubscriptions
                - es:ListDomainNames
                - s3:GetAccountPublicAccessBlock
                - s3:ListAllMyBuckets
                - ssm:GetP*
                - wafv2:ListWebACLs
                - wafv2:GetLoggingConfiguration
                - wafv2:GetWebACL
                - wafv2:GetWebACLForResource
                - cloudfront:ListDistributions
                - sagemaker:ListModels
                - ds:DescribeDirectories
                - securityhub:BatchImportFindings
                - sagemaker:ListEndpoints
                - ecr:GetRepositoryPolicy
                - sqs:ListQueues
                - sqs:GetQueueAttributes
                - globalaccelerator:ListAccelerators
                - globalaccelerator:ListListeners
                - globalaccelerator:ListEndpointGroups
                - xray:GetEncryptionConfig
                - cloud9:DescribeEnvironments
                - cloud9:ListEnvironments
                - cloudsearch:DescribeDomainEndpointOptions
                - cloudsearch:DescribeDomains
                - lambda:GetFunction
                - lambda:GetLayerVersion
                - lambda:GetLayerVersionPolicy
                - lambda:GetPolicy
                - lambda:ListFunctions
                - lambda:ListLayerVersions
                - lambda:ListLayers
                - ecs:DescribeTaskDefinition
                - ecs:ListTaskDefinitionFamilies
                - ecs:ListTaskDefinitions
                - datasync:DescribeAgent
                - datasync:DescribeTask
                - datasync:ListAgents
                - datasync:ListTasks
                - fsx:DescribeBackups
                - fsx:DescribeFileSystems
                - amplify:ListApps
                - elasticfilesystem:DescribeFileSystemPolicy
                - codeartifact:GetDomainPermissionsPolicy
                - codeartifact:ListDomains
                - codeartifact:ListRepositories
                - codeartifact:GetRepositoryPermissionsPolicy
                - shield:ListAttacks
                - cloudhsm:DescribeClusters
                - cloudhsm:DescribeBackups
                - iam:ListRolePolicies
                - iam:ListRoles
                - iam:GetRolePolicy
                - iam:GetUserPolicy
                - iam:ListGroupPolicies
                - iam:ListGroups
                - iam:GetGroupPolicy
                - iam:ListPolicies
                - iam:GetPolicyVersion
                - route53resolver:ListResolverQueryLogConfigAssociations
                - route53resolver:GetFirewallConfig
                - route53resolver:ListResolverDnssecConfigs
                - route53resolver:ListFirewallRuleGroupAssociations
                - imagebuilder:ListImagePipelines
                - imagebuilder:ListImageRecipes
                - cloudfront:GetDistribution
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action:
              - sts:AssumeRole
  ElectricEyeExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: electriceyeexecpolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action:
              - sts:AssumeRole
  ElectricEyeArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-artifact-bucket-${AWS::Region}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  ElectricEyeBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: electric-eye-bucket
      Type: String
      Value: !Ref ElectricEyeArtifactBucket
  ElectricEyeECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Ref ElectricEyeContainerInfo
          Name: !Ref ElectricEyeContainerName
          Secrets:
            - Name: SH_SCRIPTS_BUCKET
              ValueFrom: !Ref ElectricEyeBucketParameter
          Environment:
            # THREAT INTEL
            - Name: SHODAN_API_KEY_PARAM
              Value: !Ref ShodanApiKeySSMParam
            # DISRUPTOPS
            - Name: DOPS_CLIENT_ID_PARAM
              Value: !Ref DopsClientIdSSMParam
            - Name: DOPS_API_KEY_PARAM
              Value: !Ref DopsApiKeySSMParam
            # POSTGRES
            - Name: POSTGRES_USERNAME
              Value: !Ref PostgresUsername
            - Name: ELECTRICEYE_POSTGRESQL_DB_NAME
              Value: !Ref PostgresDbName
            - Name: POSTGRES_DB_ENDPOINT
              Value: !Ref PostgresEndpoint
            - Name: POSTGRES_DB_PORT
              Value: !Ref PostgresPort
            - Name: POSTGRES_PASSWORD_SSM_PARAM_NAME
              Value: !Ref PostgresPasswordSSMParam
            # DOCDB
            - Name: MONGODB_USERNAME
              Value: !Ref MongoUsername
            - Name: MONGODB_HOSTNAME
              Value: !Ref DocDbHostname
            - Name: MONGODB_PASSWORD_PARAMETER
              Value: !Ref MongoPasswordSSMParamter
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ElectricEyeECSCloudWatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
      Cpu: 2048
      ExecutionRoleArn: !GetAtt ElectricEyeExecutionRole.Arn
      Memory: 4096
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ElectricEyeTaskRole.Arn
      Family: ElectricEye2SecurityHubTask
      RequiresCompatibilities:
        - FARGATE
  ElectricEyeTaskScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(12 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ElectricEyeECSCluster.Arn
          RoleArn: !GetAtt ElectricEyeTaskRole.Arn
          Id: ElectricEyeTaskScheduler
          EcsParameters:
            TaskDefinitionArn: !Ref ElectricEyeECSTaskDefinition
            TaskCount: 1
            LaunchType: FARGATE
            PlatformVersion: "LATEST"
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref ElectricEyeSecurityGroup
                Subnets:
                  - !Ref ElectricEyeScheduledSubnet1
                  - !Ref ElectricEyeScheduledSubnet2